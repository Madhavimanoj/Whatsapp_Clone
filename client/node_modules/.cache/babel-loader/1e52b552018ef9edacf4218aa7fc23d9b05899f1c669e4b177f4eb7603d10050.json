{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\madha\\\\project\\\\client\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { io } from \"socket.io-client\";\nimport ChatWindow from \"./components/ChatWindow\";\nimport \"./App.css\";\n\n// Backend URL as per environment\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst API_URL = process.env.REACT_APP_API_URL || \"http://localhost:5000\";\nconst socket = io(API_URL, {\n  transports: [\"websocket\"],\n  withCredentials: true // Include cross-origin credentials\n});\nfunction App() {\n  _s();\n  const [chats, setChats] = useState([]);\n  const [selectedChat, setSelectedChat] = useState(null);\n  const [newMessage, setNewMessage] = useState(\"\");\n  const [typing, setTyping] = useState(false);\n\n  // Fetch messages and handle WebSocket events\n  useEffect(() => {\n    fetchMessages();\n    socket.on(\"new_message\", msg => {\n      setChats(prevChats => {\n        const updatedChats = [...prevChats];\n        const chatIndex = updatedChats.findIndex(c => c.wa_id === msg.wa_id);\n        if (chatIndex > -1) {\n          const chat = updatedChats[chatIndex];\n          const alreadyExists = chat.messages.some(m => m.meta_msg_id === msg.meta_msg_id);\n          if (!alreadyExists) chat.messages.push(msg);\n        } else {\n          updatedChats.push({\n            wa_id: msg.wa_id,\n            name: msg.name,\n            number: msg.number,\n            messages: [msg]\n          });\n        }\n        return updatedChats;\n      });\n    });\n\n    // Event: Message status updated\n    socket.on(\"status_updated\", updatedMsg => {\n      setChats(prevChats => prevChats.map(chat => chat.wa_id === updatedMsg.wa_id ? {\n        ...chat,\n        messages: chat.messages.map(msg => msg.meta_msg_id === updatedMsg.meta_msg_id ? {\n          ...msg,\n          status: updatedMsg.status\n        } : msg)\n      } : chat));\n    });\n\n    // Event: User typing\n    socket.on(\"user_typing\", wa_id => {\n      if ((selectedChat === null || selectedChat === void 0 ? void 0 : selectedChat.wa_id) === wa_id) {\n        setTyping(true);\n        setTimeout(() => setTyping(false), 1500); // Clear typing after 1.5 seconds\n      }\n    });\n\n    // Cleanup: Unsubscribe from events\n    return () => {\n      socket.off(\"new_message\");\n      socket.off(\"status_updated\");\n      socket.off(\"user_typing\");\n    };\n  }, [selectedChat === null || selectedChat === void 0 ? void 0 : selectedChat.wa_id]);\n\n  // Fetch chat messages from the backend\n  const fetchMessages = async () => {\n    try {\n      const res = await axios.get(`${API_URL}/webhook/messages`);\n      if (res.data && res.data.length > 0) {\n        setChats(res.data);\n      } else {\n        setChats([{\n          wa_id: \"demo1\",\n          name: \"Demo User\",\n          number: \"+1234567890\",\n          messages: [{\n            meta_msg_id: \"welcome-msg\",\n            message: \"Welcome! No real data yet.\",\n            timestamp: new Date(),\n            status: \"delivered\",\n            direction: \"incoming\"\n          }]\n        }]);\n      }\n    } catch (error) {\n      console.error(\"Failed to fetch messages:\", error);\n      // Provide fallback data\n      setChats([{\n        wa_id: \"error1\",\n        name: \"Error Chat\",\n        number: \"+1234567891\",\n        messages: [{\n          meta_msg_id: \"error-msg\",\n          message: \"Failed to load messages.\",\n          timestamp: new Date(),\n          status: \"failed\",\n          direction: \"incoming\"\n        }]\n      }]);\n    }\n  };\n\n  // Send new messages\n  const handleSend = async () => {\n    if (!newMessage || !selectedChat) return;\n    const payload = {\n      type: \"message\",\n      wa_id: selectedChat.wa_id,\n      name: selectedChat.name,\n      number: selectedChat.number,\n      message: newMessage,\n      timestamp: new Date().toISOString(),\n      meta_msg_id: `msg_${Date.now()}`,\n      direction: \"outgoing\"\n    };\n    try {\n      await axios.post(`${API_URL}/webhook/receive`, payload);\n      setNewMessage(\"\"); // Clear input\n    } catch (error) {\n      console.error(\"Message sending failed:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar\",\n      children: chats.map((chat, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `chat-item ${(selectedChat === null || selectedChat === void 0 ? void 0 : selectedChat.wa_id) === chat.wa_id ? \"selected\" : \"\"}`,\n        onClick: () => setSelectedChat(chat),\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: \"/images/profile.png\",\n          alt: \"Profile\",\n          className: \"profile-pic\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: chat.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n            children: chat.number\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 13\n        }, this)]\n      }, i, true, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-window\",\n      children: selectedChat ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-header\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: selectedChat.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n            children: selectedChat.number\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"chat-messages\",\n          children: /*#__PURE__*/_jsxDEV(ChatWindow, {\n            chat: selectedChat,\n            typing: typing\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"send-box\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: newMessage,\n            onChange: e => setNewMessage(e.target.value),\n            placeholder: \"Type your message...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleSend,\n            children: \"Send\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Select a chat to start messaging\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 155,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"VYuUrNEPXQD8dJQJtYp4qyAE1EE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","axios","io","ChatWindow","jsxDEV","_jsxDEV","Fragment","_Fragment","API_URL","process","env","REACT_APP_API_URL","socket","transports","withCredentials","App","_s","chats","setChats","selectedChat","setSelectedChat","newMessage","setNewMessage","typing","setTyping","fetchMessages","on","msg","prevChats","updatedChats","chatIndex","findIndex","c","wa_id","chat","alreadyExists","messages","some","m","meta_msg_id","push","name","number","updatedMsg","map","status","setTimeout","off","res","get","data","length","message","timestamp","Date","direction","error","console","handleSend","payload","type","toISOString","now","post","className","children","i","onClick","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/madha/project/client/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { io } from \"socket.io-client\";\nimport ChatWindow from \"./components/ChatWindow\";\nimport \"./App.css\";\n\n// Backend URL as per environment\nconst API_URL = process.env.REACT_APP_API_URL || \"http://localhost:5000\";\n\n\nconst socket = io(API_URL, {\n  transports: [\"websocket\"],\n  withCredentials: true, // Include cross-origin credentials\n});\n\nfunction App() {\n  const [chats, setChats] = useState([]); \n  const [selectedChat, setSelectedChat] = useState(null); \n  const [newMessage, setNewMessage] = useState(\"\"); \n  const [typing, setTyping] = useState(false); \n\n  // Fetch messages and handle WebSocket events\n  useEffect(() => {\n    fetchMessages();\n\n   \n    socket.on(\"new_message\", (msg) => {\n      setChats((prevChats) => {\n        const updatedChats = [...prevChats];\n        const chatIndex = updatedChats.findIndex((c) => c.wa_id === msg.wa_id);\n\n        if (chatIndex > -1) {\n          const chat = updatedChats[chatIndex];\n          const alreadyExists = chat.messages.some(\n            (m) => m.meta_msg_id === msg.meta_msg_id\n          );\n\n          if (!alreadyExists) chat.messages.push(msg);\n        } else {\n          updatedChats.push({\n            wa_id: msg.wa_id,\n            name: msg.name,\n            number: msg.number,\n            messages: [msg],\n          });\n        }\n        return updatedChats;\n      });\n    });\n\n    // Event: Message status updated\n    socket.on(\"status_updated\", (updatedMsg) => {\n      setChats((prevChats) =>\n        prevChats.map((chat) =>\n          chat.wa_id === updatedMsg.wa_id\n            ? {\n                ...chat,\n                messages: chat.messages.map((msg) =>\n                  msg.meta_msg_id === updatedMsg.meta_msg_id\n                    ? { ...msg, status: updatedMsg.status }\n                    : msg\n                ),\n              }\n            : chat\n        )\n      );\n    });\n\n    // Event: User typing\n    socket.on(\"user_typing\", (wa_id) => {\n      if (selectedChat?.wa_id === wa_id) {\n        setTyping(true);\n        setTimeout(() => setTyping(false), 1500); // Clear typing after 1.5 seconds\n      }\n    });\n\n    // Cleanup: Unsubscribe from events\n    return () => {\n      socket.off(\"new_message\");\n      socket.off(\"status_updated\");\n      socket.off(\"user_typing\");\n    };\n  }, [selectedChat?.wa_id]);\n\n  // Fetch chat messages from the backend\n  const fetchMessages = async () => {\n    try {\n      const res = await axios.get(`${API_URL}/webhook/messages`);\n      if (res.data && res.data.length > 0) {\n        setChats(res.data);\n      } else {\n        setChats([\n          {\n            wa_id: \"demo1\",\n            name: \"Demo User\",\n            number: \"+1234567890\",\n            messages: [\n              {\n                meta_msg_id: \"welcome-msg\",\n                message: \"Welcome! No real data yet.\",\n                timestamp: new Date(),\n                status: \"delivered\",\n                direction: \"incoming\",\n              },\n            ],\n          },\n        ]);\n      }\n    } catch (error) {\n      console.error(\"Failed to fetch messages:\", error);\n      // Provide fallback data\n      setChats([\n        {\n          wa_id: \"error1\",\n          name: \"Error Chat\",\n          number: \"+1234567891\",\n          messages: [\n            {\n              meta_msg_id: \"error-msg\",\n              message: \"Failed to load messages.\",\n              timestamp: new Date(),\n              status: \"failed\",\n              direction: \"incoming\",\n            },\n          ],\n        },\n      ]);\n    }\n  };\n\n  // Send new messages\n  const handleSend = async () => {\n    if (!newMessage || !selectedChat) return;\n\n    const payload = {\n      type: \"message\",\n      wa_id: selectedChat.wa_id,\n      name: selectedChat.name,\n      number: selectedChat.number,\n      message: newMessage,\n      timestamp: new Date().toISOString(),\n      meta_msg_id: `msg_${Date.now()}`,\n      direction: \"outgoing\",\n    };\n\n    try {\n      await axios.post(`${API_URL}/webhook/receive`, payload);\n      setNewMessage(\"\"); // Clear input\n    } catch (error) {\n      console.error(\"Message sending failed:\", error);\n    }\n  };\n\n  return (\n    <div className=\"app-container\">\n      {/* Sidebar with chat list */}\n      <div className=\"sidebar\">\n        {chats.map((chat, i) => (\n          <div\n            key={i}\n            className={`chat-item ${\n              selectedChat?.wa_id === chat.wa_id ? \"selected\" : \"\"\n            }`}\n            onClick={() => setSelectedChat(chat)}\n          >\n            <img\n              src=\"/images/profile.png\"\n              alt=\"Profile\"\n              className=\"profile-pic\"\n            />\n            <div>\n              <strong>{chat.name}</strong>\n              <br />\n              <small>{chat.number}</small>\n            </div>\n          </div>\n        ))}\n      </div>\n\n      {/* Chat window */}\n      <div className=\"chat-window\">\n        {selectedChat ? (\n          <>\n            {/* Chat header */}\n            <div className=\"chat-header\">\n              <strong>{selectedChat.name}</strong>\n              <br />\n              <small>{selectedChat.number}</small>\n            </div>\n\n            {/* Chat messages */}\n            <div className=\"chat-messages\">\n              <ChatWindow chat={selectedChat} typing={typing} />\n            </div>\n\n            {/* Send message box */}\n            <div className=\"send-box\">\n              <input\n                type=\"text\"\n                value={newMessage}\n                onChange={(e) => setNewMessage(e.target.value)}\n                placeholder=\"Type your message...\"\n              />\n              <button onClick={handleSend}>Send</button>\n            </div>\n          </>\n        ) : (\n          <p>Select a chat to start messaging</p>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}